---
title: "Introduction to Julia Language"
subtitle: "TAMIDS Workshop"
date: "10/25, 2022"
author: "Shao-Ting Chiu"
institute: Texas A\&M Univ.
format: 
    beamer:
        aspectratio: 169
        theme: Copenhagen
        header-includes: |
            \setbeamertemplate{footline}[frame number] 
            \hypersetup{pdfpagemode=FullScreen}
            %\linespread{1.1}\selectfont

bibliography: ../ref.bib
csl: ../setup/cell.csl
---

# What is Julia?

:::: {.columns}

::: {.column width="80%"}


1. *Julia* is a generic high-performance programming language[@bezanson2017julia]
    - **Just-In-Time (JIT)** compilation
    - **Multiple dispatch** creates type-stability
1. Via multiple dispatch, different programming patterns can be adapted to the application.
1. Julia supports high-level syntax that is approachable.


:::

::: {.column width="20%"}
![](../img/julia-logo-color.png){fig-align="right"} 
:::

:::


---

# A quick look at multiple dispatch

## A Generic function
```julia
julia> function multiply(a,b)
           return a*b
       end
multiply (generic function with 1 method)
```

---

# A quick look at multiple dispatch

- Type inference in Julia solves the optimized data type [@juliainf].


## Integer Input

```julia
julia> @code_llvm multiply(1, 1)
;  @ REPL[1]:1 within `multiply`
define i64 @julia_multiply_660(i64 signext %0, i64 signext %1) #0 {
top:
;  @ REPL[1]:2 within `multiply`
; ┌ @ int.jl:88 within `*`
   %2 = mul i64 %1, %0
; └
  ret i64 %2
```

- `@code_llvm` shows the processed script in [intermediate presentation (IR)](https://en.wikipedia.org/wiki/Intermediate_representation).

::: notes

This is my note.

- It can contain Markdown
- like this list

:::

---

# A quick look at multiple dispatch {.allowpagebreaks}

## Mixed Input
```julia
julia> @code_llvm multiply(2.0,2)
;  @ REPL[1]:1 within `multiply`
define double @julia_multiply_208(double %0, i64 signext %1) #0 {
top:
;  @ REPL[1]:2 within `multiply`
; ┌ @ promotion.jl:389 within `*`
; │┌ @ promotion.jl:359 within `promote`
; ││┌ @ promotion.jl:336 within `_promote`
; │││┌ @ number.jl:7 within `convert`
; ││││┌ @ float.jl:146 within `Float64`
       %2 = sitofp i64 %1 to double
# Skip
  ret double %3
}
```

---

# Significant Features

1. Julia Base and standard library are written in Julia itself.

. . .

2. Julia is always Just-in-Time (JIT) compiled

. . .

3. Multiple dispatch allows many conbinatoins of argument types
    - Approaching the speed of statically-compiled language like C/Fortran [@juliadoc]

. . .

## Why Julia is fast?[@SciMLBook]

- JIT
- Type inference
- Type specialization in functions


# Ecosystem


---

# References

