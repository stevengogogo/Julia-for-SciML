@article{bezanson2017julia,
  title={Julia: A fresh approach to numerical computing},
  author={Bezanson, Jeff and Edelman, Alan and Karpinski, Stefan and Shah, Viral B},
  journal={SIAM review},
  volume={59},
  number={1},
  pages={65--98},
  year={2017},
  publisher={SIAM},
  url={https://doi.org/10.1137/141000671}
}

 
@misc{chrisworkshopuci,
  type = {Blog},
  title = {A {{Deep Introduction}} to {{Julia}} for {{Data Science}} and {{Scientific Computing}}},
  author = {Rackauckas, Christopher},
  abstract = {This workshop is put together by Chris Rackauckas as part of the UC Irvine Data Science Initiative. This workshop is made to teach people who are experienced with other scripting languages the relatively new language Julia. Unlike the other Data Science Initiative workshops, this workshop assumes prior knowledge of some form of programming in a language such as Python, R, or MATLAB. We will start by introducing the basic syntax of the language, and quickly move into the details of how Julia is different from other scripting languages and how to exploit Julia's type system + multiple dispatch to be able to achieve C/Fortran-like performance while maintaining the concise syntax of a scripting language. Large parts of the package ecosystem will be explored and some information on implementation details will be highlighted in order for the participants to learn how to design Julia projects. The ideal participant is anyone who is interested in Julia. There are many groups of people interested in using Julia. One large fraction come with a strong software development background and C/Fortran knowledge, and are looking to learn Julia as a tool to create packages with enhanced productivity while not losing performance. On the other side, there are users who are interested in the growing package ecosystem of Julia and would like to add Julia to their knowledge-base. And then there's everything in between. One major goal of this workshop is to use Julia's language and syntax to bridge the gap between "package users" and "package developers" in the way that Julia has done.},
  howpublished = {http://ucidatascienceinitiative.github.io/IntroToJulia/},
  file = {/Users/stevenchiu/Zotero/storage/8L7QYJFC/IntroToJulia.html}
}



@misc{tseng2022,
  title = {Setup {{Julia}}},
  author = {Tseng, Wen-Wei},
  year = {2022},
  month = sep,
  journal = {Tech blog},
  abstract = {How to setup the Julia language compiler. Install official Julia binaries The easiest way is to download official Julia binaries from the official website and run the installer. Juliaup installer Juli},
  howpublished = {https://sosiristseng.github.io/Julia/julia/setup/},
  langid = {english},
  file = {/Users/stevenchiu/Zotero/storage/949VBCLA/setup.html}
}



@misc{juliainf,
  title = {Inference {{Convergence Algorithm}} in {{Julia}} - {{Julia Computing}}},
  author = {Jameson Nash},
  year = {2016},
  month = apr,
  howpublished = {https://juliacomputing.com/blog/2016/04/inference-convergence/},
  file = {/Users/stevenchiu/Zotero/storage/BRC3HRC3/inference-convergence.html}
}



@misc{juliadoc,
  title = {Julia {{Documentation}} {$\cdot$} {{The Julia Language}}},
  howpublished = {https://docs.julialang.org/en/v1/},
  file = {/Users/stevenchiu/Zotero/storage/GHI33JU8/v1.html}
}
\@software{SciMLBook,
  author = {Rackauckas, Christopher},
  doi = {10.5281/zenodo.6917234},
  title = {Parallel Computing and Scientific Machine Learning (SciML): Methods and Applications},
  url = {https://github.com/SciML/SciMLBook},
  year = {2022}
} 


@article{rackauckas2020universal,
  title={Universal differential equations for scientific machine learning},
  author={Rackauckas, Christopher and Ma, Yingbo and Martensen, Julius and Warner, Collin and Zubov, Kirill and Supekar, Rohit and Skinner, Dominic and Ramadhan, Ali and Edelman, Alan},
  journal={arXiv preprint arXiv:2001.04385},
  year={2020}
}
